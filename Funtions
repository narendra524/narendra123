FUNCTIONS:
DOM
EVENTS
#miniprojects
#major
#html,css,js,reactjs
#java,springroot,Mysql

functions:a function is reusable block of code
it can be call any whwrw program

reusable code:using an existing code with out writing it ever we need
you can use the same code with differnt arguments to get a different result

js:
keyword =function
()
parameters=values(variables) which are declared inside the () while defining a functions

Aruguments:values which are passed through the parameters at the time of calling functions

#Syntax:
function great(name)
#errors

EX:
function greet(){
  console.log("hi Reddy")
}
greet()

op:
hi Reddy

2.function greet(){
  console.log("hi Reddy")
}
greet()
console.log("hi bot")
greet()

op:
hi Reddy
hi bot
hi Reddy

3.function g(name){
  console.log("hello"+name)

}
let name=prompt("Enter your Name?")
g(name)

op:
helloNarendra Reddy

4.function addNumbers(num1, num2) {
  return num1 + num2;
}

let result = addNumbers(5, 3);
console.log(result);

Output:
8

5.sum = function(n1,n2){
  let r=n1+n2
  return r
}
console.log(sum(8,9))

op:
17

6.prime or Not
function checkPrime(number) {
  if (number <= 1) {
    return false; 
  }
  for (let i = 2; i <= Math.sqrt(number); i++) {
    if (number % i === 0) {
      return false;  prime
    }
  }
  return true; 
}
let number = 11;
if (checkPrime(number)) {
  console.log(number + " is a prime number.");
} else {
  console.log(number + " is not a prime number.");
}
op:
11 is prime number

#fibnociess series=0112358132134
function fibonacciSeries(n) {
  let fib = [0, 1]; 
 
  for (let i = 2; i < n; i++) {
    fib[i] = fib[i - 1] + fib[i - 2]; 
  }

  return fib;
}


let numTerms = 10;
let series = fibonacciSeries(numTerms);

console.log("Fibonacci series up to " + numTerms + " terms: " + series.join(", "));

op:
0112358132134

#leapyear
#armstrong number
  126
  1^3+2^3+6^3=126==126
#palindron  #121 #121
#patterns	
